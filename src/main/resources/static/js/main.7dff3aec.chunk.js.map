{"version":3,"sources":["serviceWorker.js","mmt/Nav.js","mmt/Home.js","index.js"],"names":["Boolean","window","location","hostname","match","MMTNav","react_default","a","createElement","Navbar","bg","expand","fixed","variant","Container","Brand","href","className","src","alt","Nav","Link","Collapse","id","NavDropdown","title","Item","Divider","React","Component","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","api_hotJobs","async","type","url","dataType","contentType","success","data","console","log","error","alert","hotjobs","$","ajax","ReactDOM","render","src_mmt_Nav","document","getElementById","mmt_Home","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mJCmBSC,0LA7BP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,OAAO,KAAKC,MAAM,MAAMC,QAAQ,WACjDP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACC,EAAA,EAAOM,MAAR,CAAcC,KAAK,KACfV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,2BAA2BC,IAAI,eAAeC,IAAI,oCAGrEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACY,EAAA,EAAIC,KAAL,CAAUL,KAAK,IAAIC,UAAU,cAA7B,gBACAX,EAAAC,EAAAC,cAACY,EAAA,EAAIC,KAAL,CAAUL,KAAK,OAAOC,UAAU,cAAhC,6BAEJX,EAAAC,EAAAC,cAACC,EAAA,EAAOa,SAAR,CAAiBC,GAAG,oBAChBjB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAKH,UAAU,WACXX,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAaP,UAAU,qBAAqBQ,MAAM,uCAASF,GAAG,sBAC1DjB,EAAAC,EAAAC,cAACgB,EAAA,EAAYE,KAAb,CAAkBV,KAAK,KAAvB,4BACAV,EAAAC,EAAAC,cAACgB,EAAA,EAAYG,QAAb,MACArB,EAAAC,EAAAC,cAACgB,EAAA,EAAYE,KAAb,CAAkBV,KAAK,KAAvB,iBAEJV,EAAAC,EAAAC,cAACY,EAAA,EAAIC,KAAL,CAAUL,KAAK,UAAUC,UAAU,cAAnC,gBACAX,EAAAC,EAAAC,cAACY,EAAA,EAAIC,KAAL,CAAUL,KAAK,UAAUC,UAAU,cAAnC,2BAvBPW,IAAMC,6BCyDZC,cAtDX,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACIE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MACL,CACIC,YACA,CACIC,OAAQ,EACRC,KAAM,MACNC,IAAK,wBACLC,SAAU,OACVC,YAAa,iCACbC,QAAS,SAACC,GAGEC,QAAQC,IAAI,iBAExBC,MAAO,SAACH,GAEII,MAAM,iBAlB9BnB,wEA2BI,OAAQ1B,EAAAC,EAAAC,cAAA,6DAKR2B,KAAKiB,4FAYLC,IAAEC,KAAKnB,KAAKI,MAAMC,oBAhDPZ,IAAMC,WCOzB0B,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAYC,SAASC,eAAe,YACpDJ,IAASC,OAAOlD,EAAAC,EAAAC,cAACoD,EAAD,MAAUF,SAASC,eAAe,kBHqH5C,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7dff3aec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Navbar, Nav, NavDropdown, Container } from 'react-bootstrap';\nimport './Nav.css'\n\nclass MMTNav extends React.Component\n{\n    render()\n    {\n        return (\n            <Navbar bg=\"primary\" expand=\"sm\" fixed=\"top\" variant=\"primary\">\n                <Container>\n                    <Navbar.Brand href=\"/\">\n                        <img className=\"d-inline-block align-top\" src=\"/favicon.ico\" alt=\"汽车人才网\"/>\n                    </Navbar.Brand>\n                    {/* <Navbar.Toggle aria-controls=\"basic-navbar-nav\" /> */}\n                    <Nav>\n                        <Nav.Link href=\"/\" className=\"text-white\">首页</Nav.Link>\n                        <Nav.Link href=\"/job\" className=\"text-white\">职位搜索</Nav.Link>\n                    </Nav>\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n                            <NavDropdown className=\"dropdown-menu-left\" title=\"游客，你好！\" id=\"basic-nav-dropdown\">\n                                <NavDropdown.Item href=\"#\">个人中心</NavDropdown.Item>\n                                <NavDropdown.Divider />\n                                <NavDropdown.Item href=\"#\">退出</NavDropdown.Item>\n                            </NavDropdown>\n                            <Nav.Link href=\"/signIn\" className=\"text-white\">登入</Nav.Link>\n                            <Nav.Link href=\"/signUp\" className=\"text-white\">注册</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        );\n    }\n        \n}\n\nexport default MMTNav;","import React from 'react';\nimport $ from 'jquery';\n\n\nclass Home extends React.Component\n{\n    \n    constructor(props) \n    {\n        super(props);\n        this.state = \n        {\n            api_hotJobs:\n            {\n                async : false,\n                type: 'GET',\n                url: 'localhost/api/hotjobs',\n                dataType: 'json',\n                contentType: 'application/json;charset=utf-8',\n                success: (data) =>\n                        {\n                            \n                            console.log(\"success data\");\t\n                        },\n                error: (data) =>\n                        {\n                            alert(\"error data\");\n                        }\n            }\n        };\n        \n    }\n\n    render()\n    {\n        return (<div>Hi</div>);\n    }\n\n    componentDidMount()\n    {\n        this.hotjobs();\n\n    }\n\n    componentWillUnmount()\n    {\n        \n    }\n\n    //below is for api \n    hotjobs()\n    {\n        $.ajax(this.state.api_hotJobs);\n        \n    }\n\n\n\n\n}\n\nexport default Home","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './mmt/index.css';\nimport './mmt/bootstrap.min.css';\n\nimport MMTNav from './mmt/Nav.js';\nimport Home from './mmt/Home.js';\n\nReactDOM.render(<MMTNav />, document.getElementById('mmt-nav'));\nReactDOM.render(<Home />, document.getElementById('mmt-container'));\n\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}